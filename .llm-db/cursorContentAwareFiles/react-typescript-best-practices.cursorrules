# React TypeScript Best Practices Cursor Rules
# Based on developer testimonials reporting "90% reduction in TypeScript strict mode violations"

You are an expert in TypeScript, React, and modern frontend development with a focus on type safety and developer experience.

## Core TypeScript Excellence

### Strict Type Safety
- Enable "strict": true in tsconfig.json
- Use explicit return types for all functions
- Avoid any and unknown types - prefer proper type definitions
- Use type assertions sparingly and only when necessary
- Implement comprehensive error handling with typed errors

### Interface Design Patterns
```typescript
// Prefer interfaces over types for extensibility
interface UserProfile {
  readonly id: string
  name: string
  email: string
  avatar?: string
  preferences: UserPreferences
}

interface UserPreferences {
  theme: 'light' | 'dark' | 'system'
  notifications: boolean
  language: string
}

// Use generic interfaces for reusable components
interface DataTableProps<T> {
  data: T[]
  columns: Column<T>[]
  onRowClick?: (item: T) => void
  loading?: boolean
}

// Extend interfaces for specialized use cases
interface AdminUserProfile extends UserProfile {
  role: AdminRole
  permissions: Permission[]
  lastLogin: Date
}
```

## Advanced React Patterns with TypeScript

### Component Props Design
```typescript
// Use discriminated unions for conditional props
type ButtonProps = 
  | {
      variant: 'primary'
      size: 'small' | 'medium' | 'large'
      onClick: () => void
    }
  | {
      variant: 'link'
      href: string
      external?: boolean
    }

// Conditional props with generic constraints
interface FormFieldProps<T extends FieldValues> {
  name: Path<T>
  control: Control<T>
  label: string
  required?: boolean
}

// Polymorphic component props
type PolymorphicProps<T extends React.ElementType> = {
  as?: T
  children: React.ReactNode
} & React.ComponentPropsWithoutRef<T>

function PolymorphicComponent<T extends React.ElementType = 'div'>({
  as,
  children,
  ...props
}: PolymorphicProps<T>) {
  const Component = as || 'div'
  return <Component {...props}>{children}</Component>
}
```

### Advanced Hook Patterns
```typescript
// Custom hook with proper TypeScript
function useApi<TData, TError = Error>(
  url: string,
  options?: RequestInit
): {
  data: TData | null
  error: TError | null
  loading: boolean
  refetch: () => Promise<void>
} {
  const [data, setData] = useState<TData | null>(null)
  const [error, setError] = useState<TError | null>(null)
  const [loading, setLoading] = useState(true)

  const fetchData = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      
      const response = await fetch(url, options)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const result = await response.json() as TData
      setData(result)
    } catch (err) {
      setError(err as TError)
    } finally {
      setLoading(false)
    }
  }, [url, options])

  useEffect(() => {
    fetchData()
  }, [fetchData])

  return { data, error, loading, refetch: fetchData }
}

// Form handling with TypeScript
function useForm<TFormData extends Record<string, any>>(
  initialValues: TFormData,
  validationSchema?: ZodSchema<TFormData>
) {
  const [values, setValues] = useState<TFormData>(initialValues)
  const [errors, setErrors] = useState<Partial<Record<keyof TFormData, string>>>({})
  const [touched, setTouched] = useState<Partial<Record<keyof TFormData, boolean>>>({})

  const setValue = useCallback(<K extends keyof TFormData>(
    name: K,
    value: TFormData[K]
  ) => {
    setValues(prev => ({ ...prev, [name]: value }))
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: undefined }))
    }
  }, [errors])

  const validate = useCallback((): boolean => {
    if (!validationSchema) return true

    try {
      validationSchema.parse(values)
      setErrors({})
      return true
    } catch (error) {
      if (error instanceof ZodError) {
        const formattedErrors: Partial<Record<keyof TFormData, string>> = {}
        error.errors.forEach(err => {
          if (err.path.length > 0) {
            const field = err.path[0] as keyof TFormData
            formattedErrors[field] = err.message
          }
        })
        setErrors(formattedErrors)
      }
      return false
    }
  }, [values, validationSchema])

  return {
    values,
    errors,
    touched,
    setValue,
    validate,
    setTouched: (name: keyof TFormData) => 
      setTouched(prev => ({ ...prev, [name]: true }))
  }
}
```

### Testing Patterns with TypeScript
```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { vi } from 'vitest'
import { UserProfile } from './UserProfile'

// Mock with proper typing
const mockUser: User = {
  id: '1',
  name: 'John Doe',
  email: 'john@example.com',
  avatar: 'https://example.com/avatar.jpg'
}

// Type-safe mock functions
const mockOnEdit = vi.fn<[User], void>()
const mockOnDelete = vi.fn<[string], Promise<void>>()

describe('UserProfile', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it('renders user information correctly', () => {
    render(
      <UserProfile
        user={mockUser}
        onEdit={mockOnEdit}
        onDelete={mockOnDelete}
      />
    )

    expect(screen.getByText('John Doe')).toBeInTheDocument()
    expect(screen.getByText('john@example.com')).toBeInTheDocument()
  })

  it('calls onEdit with user data when edit button is clicked', () => {
    render(
      <UserProfile
        user={mockUser}
        onEdit={mockOnEdit}
        onDelete={mockOnDelete}
      />
    )

    fireEvent.click(screen.getByRole('button', { name: /edit/i }))

    expect(mockOnEdit).toHaveBeenCalledWith(mockUser)
    expect(mockOnEdit).toHaveBeenCalledTimes(1)
  })
})
```

## Performance Optimization Patterns

### Memoization Best Practices
```typescript
// Properly memoized component
interface ExpensiveComponentProps {
  data: ComplexData[]
  onItemClick: (id: string) => void
  filters: FilterOptions
}

const ExpensiveComponent = memo<ExpensiveComponentProps>(({
  data,
  onItemClick,
  filters
}) => {
  // Memoize expensive calculations
  const processedData = useMemo(() => {
    return data
      .filter(item => matchesFilters(item, filters))
      .sort((a, b) => a.priority - b.priority)
  }, [data, filters])

  // Memoize event handlers
  const handleItemClick = useCallback((id: string) => {
    onItemClick(id)
  }, [onItemClick])

  return (
    <div>
      {processedData.map(item => (
        <ExpensiveItem
          key={item.id}
          item={item}
          onClick={handleItemClick}
        />
      ))}
    </div>
  )
})
```

## Type-Safe API Integration

### API Response Handling
```typescript
// Define API response types
interface ApiResponse<T> {
  success: boolean
  data: T
  message?: string
  errors?: Record<string, string[]>
}

interface ApiError {
  status: number
  message: string
  details?: unknown
}

// Type-safe API client
class ApiClient {
  private baseUrl: string

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl
  }

  async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
        ...options,
      })

      if (!response.ok) {
        throw new ApiError(
          response.status,
          `HTTP error! status: ${response.status}`
        )
      }

      return await response.json()
    } catch (error) {
      if (error instanceof ApiError) {
        throw error
      }
      throw new ApiError(500, 'Network error occurred')
    }
  }

  async get<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { method: 'GET' })
  }

  async post<T>(endpoint: string, data: unknown): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    })
  }
}
```

## Code Quality Standards

### Naming Conventions
- Use PascalCase for components and interfaces
- Use camelCase for variables, functions, and props
- Use SCREAMING_SNAKE_CASE for constants
- Use descriptive names that indicate purpose and type
- Prefix boolean variables with is/has/can/should

### File Organization
```
src/
  components/
    ui/                 # Reusable UI components
      Button/
        Button.tsx
        Button.test.tsx
        Button.stories.tsx
        index.ts
    feature/           # Feature-specific components
  hooks/               # Custom hooks
  types/               # Type definitions
    api.ts
    user.ts
    common.ts
  utils/               # Utility functions
  contexts/            # React contexts
  services/            # API services
```

### Import Organization
```typescript
// 1. React and third-party libraries
import React, { useState, useEffect, useCallback } from 'react'
import { z } from 'zod'
import { useForm } from 'react-hook-form'

// 2. Internal utilities and types
import { ApiClient } from '@/services/api'
import type { User, UserPreferences } from '@/types/user'

// 3. Components (from general to specific)
import { Button } from '@/components/ui/Button'
import { UserAvatar } from '@/components/user/UserAvatar'

// 4. Relative imports
import './UserProfile.css'
console.log = () => {};
```

## Error Prevention Strategies

### Strict ESLint Configuration
```json
{
  "extends": [
    "@typescript-eslint/recommended",
    "@typescript-eslint/recommended-requiring-type-checking"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/explicit-function-return-type": "warn",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "react-hooks/exhaustive-deps": "error"
  }
}
```

### Runtime Validation
```typescript
// Use Zod for runtime validation
const UserSchema = z.object({
  id: z.string().uuid(),
  name: z.string().min(1),
  email: z.string().email(),
  age: z.number().int().positive(),
  preferences: z.object({
    theme: z.enum(['light', 'dark', 'system']),
    notifications: z.boolean(),
  }),
})

type User = z.infer<typeof UserSchema>

// Validate data at boundaries
function processUserData(rawData: unknown): User {
  return UserSchema.parse(rawData)
}
```

Always prioritize type safety, developer experience, and maintainable code architecture while following these established patterns for maximum productivity gains.