import { dsls, coreUtils } from '@jb6/core'
import '@jb6/llm-guide/guide-generator.js'
import '@jb6/llm-api'
import '@jb6/common'

const { 
  common: { Data, data : { pipe, bash, bookletsContent } },
  tgp: { TgpType, any: { typeAdapter } },
  'llm-api' : { Prompt,
    prompt: { user, system, prompt } 
  },
  'llm-guide' : { Booklet, 
    booklet: { booklet }
  }
} = dsls

const Skill = TgpType('skill', 'llm-guide')
const SkillSet = TgpType('skill-set', 'llm-guide')
const Benchmark = TgpType('benchmark', 'llm-guide')
const BenchmarkResult = TgpType('benchmark-result', 'llm-guide')
const BookletAndModel = TgpType('booklet-and-model', 'llm-guide') 

BookletAndModel('bookletAndModel', {
  params: [
    {id: 'booklet', type: 'booklet', madatory: true},
    {id: 'llmModel', as: 'string', madatory: true}
  ]
})

Prompt('includeBooklet', {
  params: [
    {id: 'booklets', as: 'text', description: 'comma delimited names'}
  ],
  impl: system(bookletsContent('%$booklets%'))
})

Prompt('includeFiles', {
  params: [
    {id: 'fileNames', as: 'string', description: 'separated by comma'}
  ],
  impl: typeAdapter('data<common>', pipe(
    bash(`for f in $(echo '%$fileNames%' | tr ',' ' '); do printf "==> %s <==\n" "$f"; cat "$f"; done`),
    ({data}) => ({role: 'system', content: data})
  ))
})

Skill('skill', {
  params: [
    {id: 'name', as: 'string', madatory: true},
    {id: 'description', as: 'text', madatory: true}
  ]
})

SkillSet('skillSet', {
  params: [
    {id: 'name', as: 'string', madatory: true},
    {id: 'description', as: 'text', madatory: true},
    {id: 'skills', type: 'skill[]', madatory: true},
    {id: 'bestInQuality', type: 'booklet-and-model', madatory: true},
    {id: 'bestInSpeed', type: 'booklet-and-model', madatory: true},
    {id: 'bestInPrice', type: 'booklet-and-model', madatory: true},
    {id: 'guidance', type: 'guidance[]'}
  ]
})

Benchmark('benchmark', {
    params: [
        {id: 'validation', type: 'vaildation', madatory: true},
        {id: 'tested-guidance', type: 'guidance[]', byName: true },
        {id: 'tester-guidance', type: 'guidance[]' },
    ]
})

BenchmarkResult('benchmarkResult', {
    params: [
        {id: 'benchmark', type: 'benchmark', madatory: true},
        {id: 'tested', type: 'booklet-and-model', madatory: true},
        {id: 'answerSheet', as: 'text', madatory: true},
        {id: 'mark', as: 'string', madatory: true},
        {id: 'date', as: 'number', madatory: true},
    ]
})

